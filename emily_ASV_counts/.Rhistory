#clean up
rm(metagenomes_fungi_wide_all, metagenomes_fungi_wide_make_longer, metagenomes_fungi_all, sample, sicg_counts, median_sicg )
#---------- Load data ----------#
# metadata
#metagenomes_metadata <- read.csv("CCASE_data/ccase_metagenome_metadata.csv")
#mycocosm <- read.csv("picrust-for-fungi/data/mycocosm_its_merge.csv")
metagenomes_metadata <- read.csv("ccase_metagenome_metadata.csv")
mycocosm <- read.csv("mycocosm_its_merge.csv")
# metagenomes
#metagenomes_fungi <- read.csv("CCASE_data/CCASE_soil_MG_2013_2014_full_annotation_fungi.csv") #contains EC
metagenomes_fungi <- read.csv("CCASE_soil_MG_2013_2014_full_annotation_fungi.csv")
its_all <- read.csv('ccase_its_w_species.csv')
its_all <- subset(its_all, select = -c(X, Domain, Phylum, Class, Order, Family))
its_metadata <- read.csv("ccase_its_metadata.csv")
its_genus <- subset(its_all, select = -c(species))
its_genus <- its_genus %>% drop_na(genus)
its_genus <- its_genus %>%
group_by(genus) %>%
summarise_all(sum)
its_species <- its_all %>% drop_na(species)
its_species <- its_species %>%
group_by(species, genus) %>%
summarise_all(sum)
# cleanup
rm(its_all)
rm(list = ls())
#---------- Load data ----------#
# metadata
#metagenomes_metadata <- read.csv("CCASE_data/ccase_metagenome_metadata.csv")
#mycocosm <- read.csv("picrust-for-fungi/data/mycocosm_its_merge.csv")
metagenomes_metadata <- read.csv("ccase_metagenome_metadata.csv")
mycocosm <- read.csv("mycocosm_its_merge.csv")
# metagenomes
#metagenomes_fungi <- read.csv("CCASE_data/CCASE_soil_MG_2013_2014_full_annotation_fungi.csv") #contains EC
metagenomes_fungi <- read.csv("CCASE_soil_MG_2013_2014_full_annotation_fungi.csv")
its_all <- read.csv('ccase_its_w_species.csv')
its_all <- subset(its_all, select = -c(X, Domain, Phylum, Class, Order, Family))
its_metadata <- read.csv("ccase_its_metadata.csv")
its_genus <- subset(its_all, select = -c(species))
its_genus <- its_genus %>% drop_na(genus)
its_genus <- its_genus %>%
group_by(genus) %>%
summarise_all(sum)
its_species <- its_all %>% drop_na(species)
its_species <- its_species %>%
group_by(species, genus) %>%
summarise_all(sum)
# cleanup
rm(its_all)
# split metagenome taxonomy
split_taxa <- stringr::str_split(metagenomes_fungi$phylo, pattern = ";")
domain_names <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxa_names <- lapply(split_taxa, function(x) x[1:length(domain_names)])
tax_table <- taxa_names %>%
unlist() %>% matrix(ncol = length(domain_names), byrow = TRUE) %>%
data.frame() %>%
magrittr::set_colnames(domain_names) %>%
mutate(Genus = replace(Genus, Genus == "Escherichia-Shigella", "Escherichia"))
metagenomes_fungi_tax <- cbind(metagenomes_fungi, tax_table)
# split metagenome gold ids
split_transcript <- stringr::str_split(metagenomes_fungi$transcript, pattern = "_")
transcript_names <- c("Gold_ID")
gold_ids <- unlist(lapply(split_transcript, function(x) x[1:length(transcript_names)]))
metagenomes_fungi_tax$GoldID <- gold_ids
# cleanup
rm(split_taxa, domain_names, taxa_names, tax_table, split_transcript,
transcript_names, gold_ids)
#---------- single copy genes per fungal genome ----------#
sicgs <- unique(metagenomes_fungi$ec[grep("\\bRNA polymerase I\\b", metagenomes_fungi$product_names, ignore.case = T)]) # RNA Polymerase I
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("\\bRNA polymerase II\\b", metagenomes_fungi$product_names, ignore.case = T)])) # RNA Polymerase II
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glyceraldehyde 3-phosphate dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # GAPDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("ELF1", metagenomes_fungi$product_names, ignore.case = T)])) # ELF1
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("MCM7", metagenomes_fungi$product_names, ignore.case = T)])) # MCM7
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glucose-6-phosphate 1-dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # G6PDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Malate Synthase", metagenomes_fungi$product_names, ignore.case = T)])) # MLS
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("alpha-aminoadipate reductase", metagenomes_fungi$product_names, ignore.case = T)])) # LYS2
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("DNA topoisomerase II", metagenomes_fungi$product_names, ignore.case = T)])) # TOP2
sicgs <- unique(sicgs)
sicgs <- sicgs[!is.na(sicgs)]
# load ITS files
#its_metadata <- read.csv("CCASE_data/ccase_its_metadata.csv")
its_metadata_gold <- its_metadata[,c(6,7)]
# load predicted metagenome files
# mmg_pred <- read.csv("CCASE_data/gene_count_per_sample.csv", row.names = 1)
mmg_pred <- read.csv("gene_count_per_sample.csv", row.names = 1)
mmg_pred_t <- as.data.frame(t(mmg_pred))
mmg_pred_t$JGI.ID <- rownames(mmg_pred_t)
mmg_pred_t_gold <- merge(mmg_pred_t, its_metadata_gold, by = "JGI.ID")
mmg_pred_t_gold <- mmg_pred_t_gold[,-1]
mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] <- mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] %>% mutate_if(is.character, as.numeric)
# Average predicted metagenomes within a sample
mmg_pred_wide <- aggregate(mmg_pred_t_gold, .~GOLD.ID, FUN="mean")
# Adjust column names to match real data column names
colnames(mmg_pred_wide) <- gsub("X", "EC:", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.", ".-", colnames(mmg_pred_wide))
for(i in 1:nrow(mmg_pred_wide)){
sample <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
mmg_pred_wide[i,2:ncol(mmg_pred_wide)] <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]/median_sicg
}
# Make a long version for plotting real vs. predicted
mmg_pred_long <- mmg_pred_wide %>% pivot_longer(!GOLD.ID, names_to = "ec", values_to = "ITS_pred_count")
colnames(mmg_pred_long)[1] <- "GoldID"
#clean
rm(its_metadata_gold, mmg_pred_t, mmg_pred_t_gold, mmg_pred_wide, sample, sicg_counts, median_sicg)
# metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_tax, FUN ="sum")
# metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_tax$GoldID),]
# NOTE: CHANGE HERE
mycocosm_genus <- mycocosm[which(mycocosm$genus %in% its_species$genus),]
metagenomes_fungi_mycocosm <- metagenomes_fungi_tax[which(metagenomes_fungi_tax$Genus %in% mycocosm_genus$genus),]
metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_mycocosm, FUN ="sum")
metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_mycocosm$GoldID),]
mmg_pred_long <- mmg_pred_long[mmg_pred_long$GoldID %in% metagenomes_fungi_all$GoldID,]
###normalize data
# subset long form to make wide form dataframe
metagenomes_fungi_wide_all <- pivot_wider(metagenomes_fungi_all,
names_from = ec, values_from = X)
metagenomes_fungi_wide_all[is.na(metagenomes_fungi_wide_all)] <- 0
#normalize the reads per median single copy gene count
metagenomes_fungi_wide_all <- as.data.frame(metagenomes_fungi_wide_all)
rownames(metagenomes_fungi_wide_all) <- metagenomes_fungi_wide_all$GoldID
metagenomes_fungi_wide_all <- metagenomes_fungi_wide_all[,-1]
for(i in 1:nrow(metagenomes_fungi_wide_all)){
sample <- metagenomes_fungi_wide_all[i,]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
metagenomes_fungi_wide_all[i,] <- metagenomes_fungi_wide_all[i,]/median_sicg
}
metagenomes_fungi_wide_make_longer <- metagenomes_fungi_wide_all
metagenomes_fungi_wide_make_longer$GoldID <- rownames(metagenomes_fungi_wide_make_longer)
metagenomes_fungi_long_all <- metagenomes_fungi_wide_make_longer %>% pivot_longer(!GoldID, names_to = "ec", values_to = "Real_Count")
#clean up
rm(metagenomes_fungi_wide_all, metagenomes_fungi_wide_make_longer, metagenomes_fungi_all, sample, sicg_counts, median_sicg )
pred_vs_real_metagenomes <- merge(metagenomes_fungi_long_all, mmg_pred_long, by = c("ec", "GoldID"))
pred_vs_real_metagenomes_all <- pred_vs_real_metagenomes[complete.cases(pred_vs_real_metagenomes),]
goldids <- unique(pred_vs_real_metagenomes_all$GoldID)
#
# for(i in 1:length(unique(goldids))){
#   id <- goldids[i]
#   df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
#
#   plot <- ggplot(df, aes(x = Real_Count, y = ITS_pred_count)) + geom_point() + geom_smooth(method = "lm") + ggtitle(id) + geom_abline(slope=1, intercept=0, col = "red")
#   print(plot)
# }
#
rm(pred_vs_real_metagenomes)
###Pearson
pearson_df <- as.data.frame(matrix(data = NA, nrow = length(goldids), ncol = 4))
colnames(pearson_df) <- c("sample_id", "pearson_corr", "n_taxa_w_genome", "prediction_method")
pearson_df$sample_id <- goldids
for(i in 1:nrow(pearson_df)){
id <- pearson_df$sample_id[i]
df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
pearson_df$pearson_corr[i] <- cor(df$ITS_pred_count, df$Real_Count, method = "pearson")
pearson_df$n_taxa_w_genome #need to fill this
}
rm(id, df, i)
# pearson_df <- pearson_df[!is.na(pearson_df$pearson_corr),]
# pearson_df$sample_id
pearson_df <- pearson_df[order(pearson_df$sample_id),]
# write.csv(pearson_df, 'ELM/pearson_df_90.csv')
View(pearson_df)
rm(list = ls())
# setwd("C:/Users/Emily/Desktop/ccase")
library(tidyverse)
library(vroom)
library(vegan)
#library(ggplot2)
library(ecodist)
library(scales)
library(robCompositions)
library(plyr)
#---------- Load data ----------#
# metadata
#metagenomes_metadata <- read.csv("CCASE_data/ccase_metagenome_metadata.csv")
#mycocosm <- read.csv("picrust-for-fungi/data/mycocosm_its_merge.csv")
metagenomes_metadata <- read.csv("ccase_metagenome_metadata.csv")
mycocosm <- read.csv("mycocosm_its_merge.csv")
# metagenomes
#metagenomes_fungi <- read.csv("CCASE_data/CCASE_soil_MG_2013_2014_full_annotation_fungi.csv") #contains EC
metagenomes_fungi <- read.csv("CCASE_soil_MG_2013_2014_full_annotation_fungi.csv")
its_all <- read.csv('ccase_its_w_species.csv')
its_all <- subset(its_all, select = -c(X, Domain, Phylum, Class, Order, Family))
its_metadata <- read.csv("ccase_its_metadata.csv")
its_genus <- subset(its_all, select = -c(species))
its_genus <- its_genus %>% drop_na(genus)
its_genus <- its_genus %>%
group_by(genus) %>%
summarise_all(sum)
its_species <- its_all %>% drop_na(species)
its_species <- its_species %>%
group_by(species, genus) %>%
summarise_all(sum)
# cleanup
rm(its_all)
# split metagenome taxonomy
split_taxa <- stringr::str_split(metagenomes_fungi$phylo, pattern = ";")
domain_names <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxa_names <- lapply(split_taxa, function(x) x[1:length(domain_names)])
tax_table <- taxa_names %>%
unlist() %>% matrix(ncol = length(domain_names), byrow = TRUE) %>%
data.frame() %>%
magrittr::set_colnames(domain_names) %>%
mutate(Genus = replace(Genus, Genus == "Escherichia-Shigella", "Escherichia"))
metagenomes_fungi_tax <- cbind(metagenomes_fungi, tax_table)
# split metagenome gold ids
split_transcript <- stringr::str_split(metagenomes_fungi$transcript, pattern = "_")
transcript_names <- c("Gold_ID")
gold_ids <- unlist(lapply(split_transcript, function(x) x[1:length(transcript_names)]))
metagenomes_fungi_tax$GoldID <- gold_ids
# cleanup
rm(split_taxa, domain_names, taxa_names, tax_table, split_transcript,
transcript_names, gold_ids)
#---------- single copy genes per fungal genome ----------#
sicgs <- unique(metagenomes_fungi$ec[grep("\\bRNA polymerase I\\b", metagenomes_fungi$product_names, ignore.case = T)]) # RNA Polymerase I
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("\\bRNA polymerase II\\b", metagenomes_fungi$product_names, ignore.case = T)])) # RNA Polymerase II
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glyceraldehyde 3-phosphate dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # GAPDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("ELF1", metagenomes_fungi$product_names, ignore.case = T)])) # ELF1
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("MCM7", metagenomes_fungi$product_names, ignore.case = T)])) # MCM7
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glucose-6-phosphate 1-dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # G6PDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Malate Synthase", metagenomes_fungi$product_names, ignore.case = T)])) # MLS
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("alpha-aminoadipate reductase", metagenomes_fungi$product_names, ignore.case = T)])) # LYS2
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("DNA topoisomerase II", metagenomes_fungi$product_names, ignore.case = T)])) # TOP2
sicgs <- unique(sicgs)
sicgs <- sicgs[!is.na(sicgs)]
# load ITS files
#its_metadata <- read.csv("CCASE_data/ccase_its_metadata.csv")
its_metadata_gold <- its_metadata[,c(6,7)]
# load predicted metagenome files
# mmg_pred <- read.csv("CCASE_data/gene_count_per_sample.csv", row.names = 1)
mmg_pred <- read.csv("gene_count_per_sample.csv", row.names = 1)
mmg_pred_t <- as.data.frame(t(mmg_pred))
mmg_pred_t$JGI.ID <- rownames(mmg_pred_t)
mmg_pred_t_gold <- merge(mmg_pred_t, its_metadata_gold, by = "JGI.ID")
mmg_pred_t_gold <- mmg_pred_t_gold[,-1]
mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] <- mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] %>% mutate_if(is.character, as.numeric)
# Average predicted metagenomes within a sample
mmg_pred_wide <- aggregate(mmg_pred_t_gold, .~GOLD.ID, FUN="mean")
# Adjust column names to match real data column names
colnames(mmg_pred_wide) <- gsub("X", "EC:", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.", ".-", colnames(mmg_pred_wide))
for(i in 1:nrow(mmg_pred_wide)){
sample <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
mmg_pred_wide[i,2:ncol(mmg_pred_wide)] <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]/median_sicg
}
# Make a long version for plotting real vs. predicted
mmg_pred_long <- mmg_pred_wide %>% pivot_longer(!GOLD.ID, names_to = "ec", values_to = "ITS_pred_count")
colnames(mmg_pred_long)[1] <- "GoldID"
#clean
rm(its_metadata_gold, mmg_pred_t, mmg_pred_t_gold, mmg_pred_wide, sample, sicg_counts, median_sicg)
metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_tax, FUN ="sum")
metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_tax$GoldID),]
# NOTE: CHANGE HERE
# mycocosm_genus <- mycocosm[which(mycocosm$genus %in% its_species$genus),]
# metagenomes_fungi_mycocosm <- metagenomes_fungi_tax[which(metagenomes_fungi_tax$Genus %in% mycocosm_genus$genus),]
# metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_mycocosm, FUN ="sum")
# metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_mycocosm$GoldID),]
# mmg_pred_long <- mmg_pred_long[mmg_pred_long$GoldID %in% metagenomes_fungi_all$GoldID,]
###normalize data
# subset long form to make wide form dataframe
metagenomes_fungi_wide_all <- pivot_wider(metagenomes_fungi_all,
names_from = ec, values_from = X)
metagenomes_fungi_wide_all[is.na(metagenomes_fungi_wide_all)] <- 0
#normalize the reads per median single copy gene count
metagenomes_fungi_wide_all <- as.data.frame(metagenomes_fungi_wide_all)
rownames(metagenomes_fungi_wide_all) <- metagenomes_fungi_wide_all$GoldID
metagenomes_fungi_wide_all <- metagenomes_fungi_wide_all[,-1]
for(i in 1:nrow(metagenomes_fungi_wide_all)){
sample <- metagenomes_fungi_wide_all[i,]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
metagenomes_fungi_wide_all[i,] <- metagenomes_fungi_wide_all[i,]/median_sicg
}
metagenomes_fungi_wide_make_longer <- metagenomes_fungi_wide_all
metagenomes_fungi_wide_make_longer$GoldID <- rownames(metagenomes_fungi_wide_make_longer)
metagenomes_fungi_long_all <- metagenomes_fungi_wide_make_longer %>% pivot_longer(!GoldID, names_to = "ec", values_to = "Real_Count")
#clean up
rm(metagenomes_fungi_wide_all, metagenomes_fungi_wide_make_longer, metagenomes_fungi_all, sample, sicg_counts, median_sicg )
pred_vs_real_metagenomes <- merge(metagenomes_fungi_long_all, mmg_pred_long, by = c("ec", "GoldID"))
pred_vs_real_metagenomes_all <- pred_vs_real_metagenomes[complete.cases(pred_vs_real_metagenomes),]
goldids <- unique(pred_vs_real_metagenomes_all$GoldID)
#
# for(i in 1:length(unique(goldids))){
#   id <- goldids[i]
#   df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
#
#   plot <- ggplot(df, aes(x = Real_Count, y = ITS_pred_count)) + geom_point() + geom_smooth(method = "lm") + ggtitle(id) + geom_abline(slope=1, intercept=0, col = "red")
#   print(plot)
# }
#
rm(pred_vs_real_metagenomes)
###Pearson
pearson_df <- as.data.frame(matrix(data = NA, nrow = length(goldids), ncol = 4))
colnames(pearson_df) <- c("sample_id", "pearson_corr", "n_taxa_w_genome", "prediction_method")
pearson_df$sample_id <- goldids
for(i in 1:nrow(pearson_df)){
id <- pearson_df$sample_id[i]
df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
pearson_df$pearson_corr[i] <- cor(df$ITS_pred_count, df$Real_Count, method = "pearson")
pearson_df$n_taxa_w_genome #need to fill this
}
rm(id, df, i)
# pearson_df <- pearson_df[!is.na(pearson_df$pearson_corr),]
# pearson_df$sample_id
pearson_df <- pearson_df[order(pearson_df$sample_id),]
# write.csv(pearson_df, 'ELM/pearson_df_90.csv')
View(pearson_df)
View(mmg_pred)
View(mmg_pred_long)
View(mmg_pred)
View(metagenomes_fungi_long_all)
View(metagenomes_fungi_tax)
View(metagenomes_fungi_tax)
sum(is.na(metagenomes_fungi_tax$Genus))
sum(is.na(metagenomes_fungi_tax$Species))
View(mmg_pred)
View(mmg_pred_long)
View(mmg_pred_long)
View(mmg_pred)
View(mmg_pred_long)
# load ITS files
#its_metadata <- read.csv("CCASE_data/ccase_its_metadata.csv")
its_metadata_gold <- its_metadata[,c(6,7)]
# load predicted metagenome files
# mmg_pred <- read.csv("CCASE_data/gene_count_per_sample.csv", row.names = 1)
mmg_pred <- read.csv("gene_count_per_sample.csv", row.names = 1)
mmg_pred_t <- as.data.frame(t(mmg_pred))
mmg_pred_t$JGI.ID <- rownames(mmg_pred_t)
mmg_pred_t_gold <- merge(mmg_pred_t, its_metadata_gold, by = "JGI.ID")
mmg_pred_t_gold <- mmg_pred_t_gold[,-1]
mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] <- mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] %>% mutate_if(is.character, as.numeric)
# Average predicted metagenomes within a sample
mmg_pred_wide <- aggregate(mmg_pred_t_gold, .~GOLD.ID, FUN="mean")
# Adjust column names to match real data column names
colnames(mmg_pred_wide) <- gsub("X", "EC:", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.", ".-", colnames(mmg_pred_wide))
for(i in 1:nrow(mmg_pred_wide)){
sample <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
mmg_pred_wide[i,2:ncol(mmg_pred_wide)] <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]/median_sicg
}
# Make a long version for plotting real vs. predicted
mmg_pred_long <- mmg_pred_wide %>% pivot_longer(!GOLD.ID, names_to = "ec", values_to = "ITS_pred_count")
colnames(mmg_pred_long)[1] <- "GoldID"
#clean
#rm(its_metadata_gold, mmg_pred_t, mmg_pred_t_gold, mmg_pred_wide, sample, sicg_counts, median_sicg)
View(mmg_pred_t_gold)
View(mmg_pred_wide)
View(its_metadata_gold)
View(mmg_pred)
View(mmg_pred_t)
View(mmg_pred)
View(mmg_pred_wide)
rm(list = ls())
#---------- Load data ----------#
# metadata
#metagenomes_metadata <- read.csv("CCASE_data/ccase_metagenome_metadata.csv")
#mycocosm <- read.csv("picrust-for-fungi/data/mycocosm_its_merge.csv")
metagenomes_metadata <- read.csv("ccase_metagenome_metadata.csv")
mycocosm <- read.csv("mycocosm_its_merge.csv")
# metagenomes
#metagenomes_fungi <- read.csv("CCASE_data/CCASE_soil_MG_2013_2014_full_annotation_fungi.csv") #contains EC
metagenomes_fungi <- read.csv("CCASE_soil_MG_2013_2014_full_annotation_fungi.csv")
its_all <- read.csv('ccase_its_w_species.csv')
its_all <- subset(its_all, select = -c(X, Domain, Phylum, Class, Order, Family))
its_metadata <- read.csv("ccase_its_metadata.csv")
its_genus <- subset(its_all, select = -c(species))
its_genus <- its_genus %>% drop_na(genus)
its_genus <- its_genus %>%
group_by(genus) %>%
summarise_all(sum)
its_species <- its_all %>% drop_na(species)
its_species <- its_species %>%
group_by(species, genus) %>%
summarise_all(sum)
# cleanup
rm(its_all)
# split metagenome taxonomy
split_taxa <- stringr::str_split(metagenomes_fungi$phylo, pattern = ";")
domain_names <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxa_names <- lapply(split_taxa, function(x) x[1:length(domain_names)])
tax_table <- taxa_names %>%
unlist() %>% matrix(ncol = length(domain_names), byrow = TRUE) %>%
data.frame() %>%
magrittr::set_colnames(domain_names) %>%
mutate(Genus = replace(Genus, Genus == "Escherichia-Shigella", "Escherichia"))
metagenomes_fungi_tax <- cbind(metagenomes_fungi, tax_table)
# split metagenome gold ids
split_transcript <- stringr::str_split(metagenomes_fungi$transcript, pattern = "_")
transcript_names <- c("Gold_ID")
gold_ids <- unlist(lapply(split_transcript, function(x) x[1:length(transcript_names)]))
metagenomes_fungi_tax$GoldID <- gold_ids
# cleanup
rm(split_taxa, domain_names, taxa_names, tax_table, split_transcript,
transcript_names, gold_ids)
#---------- single copy genes per fungal genome ----------#
sicgs <- unique(metagenomes_fungi$ec[grep("\\bRNA polymerase I\\b", metagenomes_fungi$product_names, ignore.case = T)]) # RNA Polymerase I
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("\\bRNA polymerase II\\b", metagenomes_fungi$product_names, ignore.case = T)])) # RNA Polymerase II
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glyceraldehyde 3-phosphate dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # GAPDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("ELF1", metagenomes_fungi$product_names, ignore.case = T)])) # ELF1
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("MCM7", metagenomes_fungi$product_names, ignore.case = T)])) # MCM7
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Glucose-6-phosphate 1-dehydrogenase", metagenomes_fungi$product_names, ignore.case = T)])) # G6PDH
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("Malate Synthase", metagenomes_fungi$product_names, ignore.case = T)])) # MLS
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("alpha-aminoadipate reductase", metagenomes_fungi$product_names, ignore.case = T)])) # LYS2
sicgs <- c(sicgs, unique(metagenomes_fungi$ec[grep("DNA topoisomerase II", metagenomes_fungi$product_names, ignore.case = T)])) # TOP2
sicgs <- unique(sicgs)
sicgs <- sicgs[!is.na(sicgs)]
# load ITS files
#its_metadata <- read.csv("CCASE_data/ccase_its_metadata.csv")
its_metadata_gold <- its_metadata[,c(6,7)]
# load predicted metagenome files
# mmg_pred <- read.csv("CCASE_data/gene_count_per_sample.csv", row.names = 1)
# CHANGE HERE FOR SPECIES VS GENUS
mmg_pred <- read.csv("gene_count_per_sample_species.csv", row.names = 1)
mmg_pred_t <- as.data.frame(t(mmg_pred))
mmg_pred_t$JGI.ID <- rownames(mmg_pred_t)
mmg_pred_t_gold <- merge(mmg_pred_t, its_metadata_gold, by = "JGI.ID")
mmg_pred_t_gold <- mmg_pred_t_gold[,-1]
mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] <- mmg_pred_t_gold[,1:(ncol(mmg_pred_t_gold)-1)] %>% mutate_if(is.character, as.numeric)
# Average predicted metagenomes within a sample
mmg_pred_wide <- aggregate(mmg_pred_t_gold, .~GOLD.ID, FUN="mean")
# Adjust column names to match real data column names
colnames(mmg_pred_wide) <- gsub("X", "EC:", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.\\.", ".-", colnames(mmg_pred_wide))
colnames(mmg_pred_wide) <- gsub("\\.\\.", ".-", colnames(mmg_pred_wide))
for(i in 1:nrow(mmg_pred_wide)){
sample <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
mmg_pred_wide[i,2:ncol(mmg_pred_wide)] <- mmg_pred_wide[i,2:ncol(mmg_pred_wide)]/median_sicg
}
# Make a long version for plotting real vs. predicted
mmg_pred_long <- mmg_pred_wide %>% pivot_longer(!GOLD.ID, names_to = "ec", values_to = "ITS_pred_count")
colnames(mmg_pred_long)[1] <- "GoldID"
#clean
rm(its_metadata_gold, mmg_pred_t, mmg_pred_t_gold, mmg_pred_wide, sample, sicg_counts, median_sicg)
metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_tax, FUN ="sum")
metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_tax$GoldID),]
# NOTE: CHANGE HERE
# mycocosm_genus <- mycocosm[which(mycocosm$genus %in% its_species$genus),]
# metagenomes_fungi_mycocosm <- metagenomes_fungi_tax[which(metagenomes_fungi_tax$Genus %in% mycocosm_genus$genus),]
# metagenomes_fungi_all <- aggregate(X ~ ec + GoldID, metagenomes_fungi_mycocosm, FUN ="sum")
# metagenomes_metadata <- metagenomes_metadata[which(metagenomes_metadata$GOLD.ID %in% metagenomes_fungi_mycocosm$GoldID),]
# mmg_pred_long <- mmg_pred_long[mmg_pred_long$GoldID %in% metagenomes_fungi_all$GoldID,]
###normalize data
# subset long form to make wide form dataframe
metagenomes_fungi_wide_all <- pivot_wider(metagenomes_fungi_all,
names_from = ec, values_from = X)
metagenomes_fungi_wide_all[is.na(metagenomes_fungi_wide_all)] <- 0
#normalize the reads per median single copy gene count
metagenomes_fungi_wide_all <- as.data.frame(metagenomes_fungi_wide_all)
rownames(metagenomes_fungi_wide_all) <- metagenomes_fungi_wide_all$GoldID
metagenomes_fungi_wide_all <- metagenomes_fungi_wide_all[,-1]
for(i in 1:nrow(metagenomes_fungi_wide_all)){
sample <- metagenomes_fungi_wide_all[i,]
sicg_counts <- sample[,colnames(sample) %in% sicgs]
median_sicg <- apply(sicg_counts, 1, median, na.rm=T)
metagenomes_fungi_wide_all[i,] <- metagenomes_fungi_wide_all[i,]/median_sicg
}
metagenomes_fungi_wide_make_longer <- metagenomes_fungi_wide_all
metagenomes_fungi_wide_make_longer$GoldID <- rownames(metagenomes_fungi_wide_make_longer)
metagenomes_fungi_long_all <- metagenomes_fungi_wide_make_longer %>% pivot_longer(!GoldID, names_to = "ec", values_to = "Real_Count")
#clean up
rm(metagenomes_fungi_wide_all, metagenomes_fungi_wide_make_longer, metagenomes_fungi_all, sample, sicg_counts, median_sicg )
pred_vs_real_metagenomes <- merge(metagenomes_fungi_long_all, mmg_pred_long, by = c("ec", "GoldID"))
pred_vs_real_metagenomes_all <- pred_vs_real_metagenomes[complete.cases(pred_vs_real_metagenomes),]
goldids <- unique(pred_vs_real_metagenomes_all$GoldID)
#
# for(i in 1:length(unique(goldids))){
#   id <- goldids[i]
#   df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
#
#   plot <- ggplot(df, aes(x = Real_Count, y = ITS_pred_count)) + geom_point() + geom_smooth(method = "lm") + ggtitle(id) + geom_abline(slope=1, intercept=0, col = "red")
#   print(plot)
# }
#
rm(pred_vs_real_metagenomes)
###Pearson
pearson_df <- as.data.frame(matrix(data = NA, nrow = length(goldids), ncol = 4))
colnames(pearson_df) <- c("sample_id", "pearson_corr", "n_taxa_w_genome", "prediction_method")
pearson_df$sample_id <- goldids
for(i in 1:nrow(pearson_df)){
id <- pearson_df$sample_id[i]
df <- pred_vs_real_metagenomes_all[which(pred_vs_real_metagenomes_all$GoldID == id),]
pearson_df$pearson_corr[i] <- cor(df$ITS_pred_count, df$Real_Count, method = "pearson")
pearson_df$n_taxa_w_genome #need to fill this
}
rm(id, df, i)
# pearson_df <- pearson_df[!is.na(pearson_df$pearson_corr),]
# pearson_df$sample_id
pearson_df <- pearson_df[order(pearson_df$sample_id),]
# write.csv(pearson_df, 'ELM/pearson_df_90.csv')
View(pearson_df)
